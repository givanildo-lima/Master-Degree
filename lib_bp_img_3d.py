import numpy as np, math, functools
import pandas as pd
import matplotlib.pyplot as plt

def bubbleSort(alist, blist):
    for passnum in range(len(alist)-1,0,-1):
        for i in range(passnum):
            if alist[i]>alist[i+1]:
                temp = alist[i]
                alist[i] = alist[i+1]
                alist[i+1] = temp
                temp = blist[i]
                blist[i] = blist[i+1]
                blist[i+1] = temp
                
##

def reduce_concat(x, sep=""):
    return functools.reduce(lambda x, y: str(x) + sep + str(y), x)

##

def paste(*lists, sep, collapse=None):
    result = map(lambda x: reduce_concat(x, sep=sep), zip(*lists))
    if collapse is not None:
        return reduce_concat(result, sep=collapse)
    return list(result)

##

def sections(N, top, bot):
    secs = []
    for i in range(1, N):
        sec = (((N-i)*top**3)/N + (i*bot**3)/N)**(1/3)
        secs.append(sec)
    return secs

##

def euclidean_distance_3d(a, b, c):
    return math.sqrt(a**2 + b**2 + c**2)

##

def fabi(data, i, a, b, n_linhas, n_colunas):
    linha = int(i // a)
    coluna = int(i % a)

    # Garante que a submatriz desejada esteja dentro dos limites da matriz original
    if linha + n_linhas > a or coluna + n_colunas > b:
        raise ValueError("As dimensões do retângulo excedem os limites da matriz.")

    # Extrai a submatriz com as dimensões especificadas
    result = data[linha:linha + n_linhas, coluna:coluna + n_colunas].flatten()
    return result

def bandt_pompe_method(data, dx, dy, intervalo = 1):
    
  numbers = ['0', '1', '2', '3', '4', '5']
  letters = ['A', 'B', 'C', 'D', 'E']
    
  red_channel = data[:, :, 0]   # Canal vermelho
  green_channel = data[:, :, 1] # Canal verde
  blue_channel = data[:, :, 2]  # Canal azul
  
  n_linhas, n_colunas = red_channel.shape
  D = dx*dy  
  
  if D == 3:
      M = 18
      dicionario = {'012': 1, '021': 2, '102': 3, '120': 4, '201': 5, '210': 6}
      dimensional = {'21AB0': 1, '2A1B0': 2, '2AB10': 3}
      
  if D == 4:
       M = 240
       dicionario = {'0123': 1, '0132': 2, '0213': 3, '0231': 4, '0312': 5, '0321': 6, '1023': 7, '1032': 8, '1203': 9, '1230': 10, '1302': 11, '1320': 12, '2013': 13, '2031': 14, '2103': 15, '2130': 16, '2301': 17, '2310': 18, '3012': 19, '3021': 20, '3102': 21, '3120': 22, '3201': 23, '3210': 24}
       dimensional = {'321ABC0': 1, '3A21BC0': 2, '3AB21C0': 3, '3ABC210': 4, '32A1BC0': 5, '32AB1C0': 6, '32ABC10': 7, '3A2B1C0': 8, '3A2BC10': 9, '3AB2C10': 10}
      
  if D == 5:
       M = 4200
       dicionario = {'01234': 1, '01243': 2, '01324': 3, '01342': 4, '01423': 5, '01432': 6, '02134': 7, '02143': 8, '02314': 9, '02341': 10, '02413': 11, '02431': 12, '03124': 13, '03142': 14, '03214': 15, '03241': 16, '03412': 17, '03421': 18, '04123': 19, '04132': 20, '04213': 21, '04231': 22, '04312': 23, '04321': 24, '10234': 25, '10243': 26, '10324': 27, '10342': 28, '10423': 29, '10432': 30, '12034': 31, '12043': 32, '12304': 33, '12340': 34, '12403': 35, '12430': 36, '13024': 37, '13042': 38, '13204': 39, '13240': 40, '13402': 41, '13420': 42, '14023': 43, '14032': 44, '14203': 45, '14230': 46, '14302': 47, '14320': 48, '20134': 49, '20143': 50, '20314': 51, '20341': 52, '20413': 53, '20431': 54, '21034': 55, '21043': 56, '21304': 57, '21340': 58, '21403': 59, '21430': 60, '23014': 61, '23041': 62, '23104': 63, '23140': 64, '23401': 65, '23410': 66, '24013': 67, '24031': 68, '24103': 69, '24130': 70, '24301': 71, '24310': 72, '30124': 73, '30142': 74, '30214': 75, '30241': 76, '30412': 77, '30421': 78, '31024': 79, '31042': 80, '31204': 81, '31240': 82, '31402': 83, '31420': 84, '32014': 85, '32041': 86, '32104': 87, '32140': 88, '32401': 89, '32410': 90, '34012': 91, '34021': 92, '34102': 93, '34120': 94, '34201': 95, '34210': 96, '40123': 97, '40132': 98, '40213': 99, '40231': 100, '40312': 101, '40321': 102, '41023': 103, '41032': 104, '41203': 105, '41230': 106, '41302': 107, '41320': 108, '42013': 109, '42031': 110, '42103': 111, '42130': 112, '42301': 113, '42310': 114, '43012': 115, '43021': 116, '43102': 117, '43120': 118, '43201': 119, '43210': 120} 
       dimensional = {'4321ABCD0': 1, '4A321BCD0': 2, '4AB321CD0': 3, '4ABC321D0': 4, '4ABCD3210': 5, '43A21BCD0': 6, '43AB21CD0': 7, '43ABC21D0': 8, '43ABCD210': 9, '4A3B21CD0': 10, '4A3BC21D0': 11, '4A3BCD210': 12, '4AB3C21D0': 13, '4AB3CD210': 14, '4ABC3D210': 15, '432A1BCD0': 16, '432AB1CD0': 17, '432ABC1D0': 18, '432ABCD10': 19, '4A32B1CD0': 20, '4A32BC1D0': 21, '4A32BCD10': 22, '4AB32C1D0': 23, '4AB32CD10': 24, '4ABC32D10': 25, '43A2B1CD0': 26, '43A2BC1D0': 27, '43A2BCD10': 28, '43AB2C1D0': 29, '43AB2CD10': 30, '43ABC2D10': 31, '4A3B2C1D0': 32, '4A3B2CD10': 33, '4A3BC2D10': 34, '4AB3C2D10': 35}
  
  if D == 6:
       M = 90720
       dicionario = {'012345': 1, '012354': 2, '012435': 3, '012453': 4, '012534': 5, '012543': 6, '013245': 7, '013254': 8, '013425': 9, '013452': 10, '013524': 11, '013542': 12, '014235': 13, '014253': 14, '014325': 15, '014352': 16, '014523': 17, '014532': 18, '015234': 19, '015243': 20, '015324': 21, '015342': 22, '015423': 23, '015432': 24, '021345': 25, '021354': 26, '021435': 27, '021453': 28, '021534': 29, '021543': 30, '023145': 31, '023154': 32, '023415': 33, '023451': 34, '023514': 35, '023541': 36, '024135': 37, '024153': 38, '024315': 39, '024351': 40, '024513': 41, '024531': 42, '025134': 43, '025143': 44, '025314': 45, '025341': 46, '025413': 47, '025431': 48, '031245': 49, '031254': 50, '031425': 51, '031452': 52, '031524': 53, '031542': 54, '032145': 55, '032154': 56, '032415': 57, '032451': 58, '032514': 59, '032541': 60, '034125': 61, '034152': 62, '034215': 63, '034251': 64, '034512': 65, '034521': 66, '035124': 67, '035142': 68, '035214': 69, '035241': 70, '035412': 71, '035421': 72, '041235': 73, '041253': 74, '041325': 75, '041352': 76, '041523': 77, '041532': 78, '042135': 79, '042153': 80, '042315': 81, '042351': 82, '042513': 83, '042531': 84, '043125': 85, '043152': 86, '043215': 87, '043251': 88, '043512': 89, '043521': 90, '045123': 91, '045132': 92, '045213': 93, '045231': 94, '045312': 95, '045321': 96, '051234': 97, '051243': 98, '051324': 99, '051342': 100, '051423': 101, '051432': 102, '052134': 103, '052143': 104, '052314': 105, '052341': 106, '052413': 107, '052431': 108, '053124': 109, '053142': 110, '053214': 111, '053241': 112, '053412': 113, '053421': 114, '054123': 115, '054132': 116, '054213': 117, '054231': 118, '054312': 119, '054321': 120, '102345': 121, '102354': 122, '102435': 123, '102453': 124, '102534': 125, '102543': 126, '103245': 127, '103254': 128, '103425': 129, '103452': 130, '103524': 131, '103542': 132, '104235': 133, '104253': 134, '104325': 135, '104352': 136, '104523': 137, '104532': 138, '105234': 139, '105243': 140, '105324': 141, '105342': 142, '105423': 143, '105432': 144, '120345': 145, '120354': 146, '120435': 147, '120453': 148, '120534': 149, '120543': 150, '123045': 151, '123054': 152, '123405': 153, '123450': 154, '123504': 155, '123540': 156, '124035': 157, '124053': 158, '124305': 159, '124350': 160, '124503': 161, '124530': 162, '125034': 163, '125043': 164, '125304': 165, '125340': 166, '125403': 167, '125430': 168, '130245': 169, '130254': 170, '130425': 171, '130452': 172, '130524': 173, '130542': 174, '132045': 175, '132054': 176, '132405': 177, '132450': 178, '132504': 179, '132540': 180, '134025': 181, '134052': 182, '134205': 183, '134250': 184, '134502': 185, '134520': 186, '135024': 187, '135042': 188, '135204': 189, '135240': 190, '135402': 191, '135420': 192, '140235': 193, '140253': 194, '140325': 195, '140352': 196, '140523': 197, '140532': 198, '142035': 199, '142053': 200, '142305': 201, '142350': 202, '142503': 203, '142530': 204, '143025': 205, '143052': 206, '143205': 207, '143250': 208, '143502': 209, '143520': 210, '145023': 211, '145032': 212, '145203': 213, '145230': 214, '145302': 215, '145320': 216, '150234': 217, '150243': 218, '150324': 219, '150342': 220, '150423': 221, '150432': 222, '152034': 223, '152043': 224, '152304': 225, '152340': 226, '152403': 227, '152430': 228, '153024': 229, '153042': 230, '153204': 231, '153240': 232, '153402': 233, '153420': 234, '154023': 235, '154032': 236, '154203': 237, '154230': 238, '154302': 239, '154320': 240, '201345': 241, '201354': 242, '201435': 243, '201453': 244, '201534': 245, '201543': 246, '203145': 247, '203154': 248, '203415': 249, '203451': 250, '203514': 251, '203541': 252, '204135': 253, '204153': 254, '204315': 255, '204351': 256, '204513': 257, '204531': 258, '205134': 259, '205143': 260, '205314': 261, '205341': 262, '205413': 263, '205431': 264, '210345': 265, '210354': 266, '210435': 267, '210453': 268, '210534': 269, '210543': 270, '213045': 271, '213054': 272, '213405': 273, '213450': 274, '213504': 275, '213540': 276, '214035': 277, '214053': 278, '214305': 279, '214350': 280, '214503': 281, '214530': 282, '215034': 283, '215043': 284, '215304': 285, '215340': 286, '215403': 287, '215430': 288, '230145': 289, '230154': 290, '230415': 291, '230451': 292, '230514': 293, '230541': 294, '231045': 295, '231054': 296, '231405': 297, '231450': 298, '231504': 299, '231540': 300, '234015': 301, '234051': 302, '234105': 303, '234150': 304, '234501': 305, '234510': 306, '235014': 307, '235041': 308, '235104': 309, '235140': 310, '235401': 311, '235410': 312, '240135': 313, '240153': 314, '240315': 315, '240351': 316, '240513': 317, '240531': 318, '241035': 319, '241053': 320, '241305': 321, '241350': 322, '241503': 323, '241530': 324, '243015': 325, '243051': 326, '243105': 327, '243150': 328, '243501': 329, '243510': 330, '245013': 331, '245031': 332, '245103': 333, '245130': 334, '245301': 335, '245310': 336, '250134': 337, '250143': 338, '250314': 339, '250341': 340, '250413': 341, '250431': 342, '251034': 343, '251043': 344, '251304': 345, '251340': 346, '251403': 347, '251430': 348, '253014': 349, '253041': 350, '253104': 351, '253140': 352, '253401': 353, '253410': 354, '254013': 355, '254031': 356, '254103': 357, '254130': 358, '254301': 359, '254310': 360, '301245': 361, '301254': 362, '301425': 363, '301452': 364, '301524': 365, '301542': 366, '302145': 367, '302154': 368, '302415': 369, '302451': 370, '302514': 371, '302541': 372, '304125': 373, '304152': 374, '304215': 375, '304251': 376, '304512': 377, '304521': 378, '305124': 379, '305142': 380, '305214': 381, '305241': 382, '305412': 383, '305421': 384, '310245': 385, '310254': 386, '310425': 387, '310452': 388, '310524': 389, '310542': 390, '312045': 391, '312054': 392, '312405': 393, '312450': 394, '312504': 395, '312540': 396, '314025': 397, '314052': 398, '314205': 399, '314250': 400, '314502': 401, '314520': 402, '315024': 403, '315042': 404, '315204': 405, '315240': 406, '315402': 407, '315420': 408, '320145': 409, '320154': 410, '320415': 411, '320451': 412, '320514': 413, '320541': 414, '321045': 415, '321054': 416, '321405': 417, '321450': 418, '321504': 419, '321540': 420, '324015': 421, '324051': 422, '324105': 423, '324150': 424, '324501': 425, '324510': 426, '325014': 427, '325041': 428, '325104': 429, '325140': 430, '325401': 431, '325410': 432, '340125': 433, '340152': 434, '340215': 435, '340251': 436, '340512': 437, '340521': 438, '341025': 439, '341052': 440, '341205': 441, '341250': 442, '341502': 443, '341520': 444, '342015': 445, '342051': 446, '342105': 447, '342150': 448, '342501': 449, '342510': 450, '345012': 451, '345021': 452, '345102': 453, '345120': 454, '345201': 455, '345210': 456, '350124': 457, '350142': 458, '350214': 459, '350241': 460, '350412': 461, '350421': 462, '351024': 463, '351042': 464, '351204': 465, '351240': 466, '351402': 467, '351420': 468, '352014': 469, '352041': 470, '352104': 471, '352140': 472, '352401': 473, '352410': 474, '354012': 475, '354021': 476, '354102': 477, '354120': 478, '354201': 479, '354210': 480, '401235': 481, '401253': 482, '401325': 483, '401352': 484, '401523': 485, '401532': 486, '402135': 487, '402153': 488, '402315': 489, '402351': 490, '402513': 491, '402531': 492, '403125': 493, '403152': 494, '403215': 495, '403251': 496, '403512': 497, '403521': 498, '405123': 499, '405132': 500, '405213': 501, '405231': 502, '405312': 503, '405321': 504, '410235': 505, '410253': 506, '410325': 507, '410352': 508, '410523': 509, '410532': 510, '412035': 511, '412053': 512, '412305': 513, '412350': 514, '412503': 515, '412530': 516, '413025': 517, '413052': 518, '413205': 519, '413250': 520, '413502': 521, '413520': 522, '415023': 523, '415032': 524, '415203': 525, '415230': 526, '415302': 527, '415320': 528, '420135': 529, '420153': 530, '420315': 531, '420351': 532, '420513': 533, '420531': 534, '421035': 535, '421053': 536, '421305': 537, '421350': 538, '421503': 539, '421530': 540, '423015': 541, '423051': 542, '423105': 543, '423150': 544, '423501': 545, '423510': 546, '425013': 547, '425031': 548, '425103': 549, '425130': 550, '425301': 551, '425310': 552, '430125': 553, '430152': 554, '430215': 555, '430251': 556, '430512': 557, '430521': 558, '431025': 559, '431052': 560, '431205': 561, '431250': 562, '431502': 563, '431520': 564, '432015': 565, '432051': 566, '432105': 567, '432150': 568, '432501': 569, '432510': 570, '435012': 571, '435021': 572, '435102': 573, '435120': 574, '435201': 575, '435210': 576, '450123': 577, '450132': 578, '450213': 579, '450231': 580, '450312': 581, '450321': 582, '451023': 583, '451032': 584, '451203': 585, '451230': 586, '451302': 587, '451320': 588, '452013': 589, '452031': 590, '452103': 591, '452130': 592, '452301': 593, '452310': 594, '453012': 595, '453021': 596, '453102': 597, '453120': 598, '453201': 599, '453210': 600, '501234': 601, '501243': 602, '501324': 603, '501342': 604, '501423': 605, '501432': 606, '502134': 607, '502143': 608, '502314': 609, '502341': 610, '502413': 611, '502431': 612, '503124': 613, '503142': 614, '503214': 615, '503241': 616, '503412': 617, '503421': 618, '504123': 619, '504132': 620, '504213': 621, '504231': 622, '504312': 623, '504321': 624, '510234': 625, '510243': 626, '510324': 627, '510342': 628, '510423': 629, '510432': 630, '512034': 631, '512043': 632, '512304': 633, '512340': 634, '512403': 635, '512430': 636, '513024': 637, '513042': 638, '513204': 639, '513240': 640, '513402': 641, '513420': 642, '514023': 643, '514032': 644, '514203': 645, '514230': 646, '514302': 647, '514320': 648, '520134': 649, '520143': 650, '520314': 651, '520341': 652, '520413': 653, '520431': 654, '521034': 655, '521043': 656, '521304': 657, '521340': 658, '521403': 659, '521430': 660, '523014': 661, '523041': 662, '523104': 663, '523140': 664, '523401': 665, '523410': 666, '524013': 667, '524031': 668, '524103': 669, '524130': 670, '524301': 671, '524310': 672, '530124': 673, '530142': 674, '530214': 675, '530241': 676, '530412': 677, '530421': 678, '531024': 679, '531042': 680, '531204': 681, '531240': 682, '531402': 683, '531420': 684, '532014': 685, '532041': 686, '532104': 687, '532140': 688, '532401': 689, '532410': 690, '534012': 691, '534021': 692, '534102': 693, '534120': 694, '534201': 695, '534210': 696, '540123': 697, '540132': 698, '540213': 699, '540231': 700, '540312': 701, '540321': 702, '541023': 703, '541032': 704, '541203': 705, '541230': 706, '541302': 707, '541320': 708, '542013': 709, '542031': 710, '542103': 711, '542130': 712, '542301': 713, '542310': 714, '543012': 715, '543021': 716, '543102': 717, '543120': 718, '543201': 719, '543210': 720}
       dimensional = {'54A3B21CDE0': 1, '5ABC43D21E0': 2, '5ABC4D32E10': 3, '5A4B3CD21E0': 4, '5A4BCDE3210': 5, '54ABC3D2E10': 6, '5A4321BCDE0': 7, '5AB43CD21E0': 8, '54321ABCDE0': 9, '54A3BCDE210': 10, '5ABC432DE10': 11, '54ABC32D1E0': 12, '5A4BC32DE10': 13, '54ABC321DE0': 14, '54AB32CD1E0': 15, '54A321BCDE0': 16, '5A4BCD3E210': 17, '54AB32C1DE0': 18, '5A4BCD32E10': 19, '54ABC3DE210': 20, '5A43B2C1DE0': 21, '5A432BCD1E0': 22, '5A4BC321DE0': 23, '5AB432C1DE0': 24, '5A4B32CDE10': 25, '54AB3CD2E10': 26, '5AB4C3D2E10': 27, '54A3BC21DE0': 28, '5A4BC32D1E0': 29, '54A32BC1DE0': 30, '5AB43C2DE10': 31, '543ABC2DE10': 32, '5AB4C32D1E0': 33, '5AB432CD1E0': 34, '5A432BC1DE0': 35, '5ABCD4E3210': 36, '543ABCD2E10': 37, '5A43BC21DE0': 38, '54A3BC2D1E0': 39, '54ABCD321E0': 40, '5A43BCD2E10': 41, '5AB43CD2E10': 42, '5ABCD43E210': 43, '5AB43CDE210': 44, '5432ABCD1E0': 45, '54A32BCDE10': 46, '5A4BC3D2E10': 47, '5432ABC1DE0': 48, '54A3B2C1DE0': 49, '5A43BC2DE10': 50, '54AB3C2DE10': 51, '54A3BCD21E0': 52, '5AB43C2D1E0': 53, '543A21BCDE0': 54, '54A3BC2DE10': 55, '5ABCD432E10': 56, '54ABCD32E10': 57, '5ABCDE43210': 58, '5A432BCDE10': 59, '5ABC432D1E0': 60, '54AB32CDE10': 61, '543A2BCD1E0': 62, '5A43BCDE210': 63, '54AB3C2D1E0': 64, '5AB4CD321E0': 65, '5A43B21CDE0': 66, '5A43BCD21E0': 67, '543AB21CDE0': 68, '543ABCD21E0': 69, '54A3BCD2E10': 70, '543ABC2D1E0': 71, '54AB3C21DE0': 72, '54ABCD3E210': 73, '5ABC43D2E10': 74, '5AB4321CDE0': 75, '5A4B32CD1E0': 76, '5A43B2CD1E0': 77, '54ABCDE3210': 78, '5AB4C3D21E0': 79, '5A4B3C2D1E0': 80, '5432ABCDE10': 81, '54A3B2CD1E0': 82, '5ABC4321DE0': 83, '54A3B2CDE10': 84, '543AB2CDE10': 85, '5A4BCD321E0': 86, '543AB2C1DE0': 87, '5A4B321CDE0': 88, '5A43B2CDE10': 89, '5432AB1CDE0': 90, '5A4BC3D21E0': 91, '54AB321CDE0': 92, '5A4BC3DE210': 93, '54A32BCD1E0': 94, '543A2BCDE10': 95, '543ABC21DE0': 96, '5ABC43DE210': 97, '5432A1BCDE0': 98, '54AB3CD21E0': 99, '54AB3CDE210': 100, '54A32B1CDE0': 101, '5AB4CDE3210': 102, '5A4B3CDE210': 103, '5A432B1CDE0': 104, '5AB4CD32E10': 105, '5A4B3C2DE10': 106, '5AB4CD3E210': 107, '5AB43C21DE0': 108, '54ABC32DE10': 109, '5AB432CDE10': 110, '5ABC4DE3210': 111, '54ABC3D21E0': 112, '543A2B1CDE0': 113, '5AB4C3DE210': 114, '5ABC4D3E210': 115, '5A4B3CD2E10': 116, '543ABCDE210': 117, '5AB4C32DE10': 118, '543AB2CD1E0': 119, '5A43BC2D1E0': 120, '5AB4C321DE0': 121, '5A4B3C21DE0': 122, '5ABC4D321E0': 123, '5ABCD4321E0': 124, '543A2BC1DE0': 125, '5A4B32C1DE0': 126}

  frequency_vector = np.zeros(M)
  
  # cria um vetor de sigma posicoes, de 0 a sigma-1
  ids = np.arange(D)
  
  for i in range(0, n_linhas-dx+1):
      for j in range(0, n_colunas-dy+1):
          
          cont = i*n_linhas + j
          support_red = fabi(red_channel, cont, n_linhas, n_colunas, dx, dy)
          support_green = fabi(green_channel, cont, n_linhas, n_colunas, dx, dy)
          support_blue = fabi(blue_channel, cont, n_linhas, n_colunas, dx, dy)
          
          # Verificando os padrões ordinais
          values = []
          for v in range(D):
              euc_dist = euclidean_distance_3d(support_red[v], support_green[v], support_blue[v])
              values.append(euc_dist)
          
          ids = np.arange(D) #Resetando o ids para [0, ..., sigma-1]
          bubbleSort(values, ids)
          ordinal_pattern = str(paste(ids, sep = " ", collapse=""))
          
          # Verificando os padrões dimensionais
          secs = sections(D, max(values), min(values))
          sub_patterns = {}
          
          for _ in range(D):
              sub_patterns[numbers[_]] = values[_]
      
          for _ in range(D-1):
              sub_patterns[letters[_]] = secs[_]
              
          keys = sorted(sub_patterns, key = sub_patterns.get)
          keys.reverse()
          dim_pattern = str(paste(keys, sep=' ', collapse=""))
          
          if(D == 3):
              if(max(values) == min(values)):
                  dim_pattern = '2A1B0'
              posix = dimensional[dim_pattern] - 1
              frequency_vector[3*(dicionario[ordinal_pattern] - 1) + posix] += 1
      
          if(D == 4):
              if(max(values) == min(values)):
                  dim_pattern = '3A2B1C0'
              posix = dimensional[dim_pattern] - 1
              frequency_vector[10*(dicionario[ordinal_pattern] - 1) + posix] += 1

          if(D == 5):
              if(max(values) == min(values)):
                  dim_pattern = '4A3B2C1D0'
              posix = dimensional[dim_pattern] - 1
              frequency_vector[35*(dicionario[ordinal_pattern] - 1) + posix] += 1

          if(D == 6):
              if(max(values) == min(values)):
                  dim_pattern = '5A4B3C2D1E0'
              posix = dimensional[dim_pattern] - 1
              frequency_vector[126*(dicionario[ordinal_pattern] - 1) + posix] += 1

  probabilities = (frequency_vector)/((n_linhas-dx+1)*(n_colunas-dy+1))
  #probabilities = np.delete(probabilities, 0)
  probs = probabilities/probabilities.sum()
  
  return probs
      
##
##

def shannon_entropy(probs, normalized = False, sigma=3):
    if(sigma == 3):
        M = 18
    if(sigma == 4):
        M = 240
    if sigma == 5:
        M = 4200
    if sigma == 6:
        M = 90720

    p = np.where(probs > 1e-30) #Descarta os valores nulos do vetor de probabilidades
    entropy = 0.0
    for i in p[0]: 
        entropy -= probs[i]*math.log(probs[i])
    if(normalized):
        entropy = entropy/math.log(M)
    return entropy

##
##
    
def jensen_shannon(probs_1, probs_2):
    J = math.sqrt( shannon_entropy( (probs_1 + probs_2) / 2.0  ) - shannon_entropy(probs_1)/2.0 - shannon_entropy(probs_2)/2.0 )
    return J

##
##
    
def complexity(probs, entropy):
    N = len(probs)
    P_e = np.repeat(1.0/N, N)
    J = shannon_entropy( (probs + P_e) / 2.0  ) - shannon_entropy(probs)/2.0 - shannon_entropy(P_e)/2.0
    Q0 = -2.0*(1.0/(((N+1.0)/N) * math.log(N + 1.0) - 2.0*math.log(2.0*N) + math.log(N))) 
    #Q0 = -(1.0/2.0) * (((N+1.0)/N) * math.log(N + 1.0) - 2.0*math.log(2.0*N) + math.log(N))
    Q = Q0 * J
    complexity = Q*entropy
    return complexity

##
##

def plot_3d(sigma = 3, folder='./limits/mv/'):
    if(sigma == 3):
        M = 18
    if(sigma == 4):
        M = 240
    if sigma == 5:
        M = 4200
    if sigma == 6:
        M = 90720

    df_cont = pd.read_csv(folder +'continua-N'+str(M)+'.q1', skiprows=7, sep = '  ', engine = 'python')
    df_cont.columns = ['HT', 'CJT']

    df_troz = pd.read_csv(folder +'trozos-N'+str(M)+'.q1', skiprows=7, sep = '  ', engine = 'python')
    df_troz.columns = ['HT', 'CJT']

    plt.plot(df_cont['HT'], df_cont['CJT'], color='black')
    plt.plot(df_troz['HT'], df_troz['CJT'], color='black')

    plt.xlabel("Entropia de Permutação", size=15) #size = 12
    plt.ylabel("Complexidade Estatística", size=15)
    #plt.title("Chaotic Attractors")

    return plt

##
##

def plot_2d(D = 6, folder='./limits/unv/'):

	fat = np.math.factorial(D)

	df_cont = pd.read_csv(folder +'continua-N'+str(fat)+'.q1', skiprows=20, sep = '  ', engine = 'python') #7
	df_cont.columns = ['HT', 'CJT']

	df_troz = pd.read_csv(folder +'trozos-N'+str(fat)+'.q1', skiprows=20, sep = '  ', engine = 'python')
	df_troz.columns = ['HT', 'CJT']

	plt.plot(df_cont['HT'], df_cont['CJT'], color='black')
	plt.plot(df_troz['HT'], df_troz['CJT'], color='black')

	plt.xlabel("Entropia de Permutação", size=15) #12
	plt.ylabel("Complexidade Estatística", size=15)

	return plt